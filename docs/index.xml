<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>About Edward on Edward Docs</title>
    <link>http://engblog.yext.com/edward/index.xml</link>
    <description>Recent content in About Edward on Edward Docs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Released under the MIT license</copyright>
    <lastBuildDate>Tue, 08 Mar 2016 21:07:13 +0100</lastBuildDate>
    <atom:link href="http://engblog.yext.com/edward/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Getting started</title>
      <link>http://engblog.yext.com/edward/installation/</link>
      <pubDate>Wed, 09 Mar 2016 00:11:02 +0100</pubDate>
      
      <guid>http://engblog.yext.com/edward/installation/</guid>
      <description>

&lt;h2 id=&#34;requirements&#34;&gt;Requirements&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;macOS or Linux&lt;/li&gt;
&lt;li&gt;Go 1.6 or higher&lt;/li&gt;
&lt;li&gt;Git&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;installing-edward&#34;&gt;Installing Edward&lt;/h2&gt;

&lt;p&gt;Install or update with &lt;code&gt;go get&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;go get -u github.com/yext/edward
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;updates&#34;&gt;Updates&lt;/h2&gt;

&lt;p&gt;Edward will notify you whenever a newer version is available. If there is an
update available, the next time you run an Edward command, you will see a message
advising you to update.&lt;/p&gt;

&lt;p&gt;As above, you can update with &lt;code&gt;go get&lt;/code&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Getting started</title>
      <link>http://engblog.yext.com/edward/quickstart/</link>
      <pubDate>Wed, 09 Mar 2016 00:11:02 +0100</pubDate>
      
      <guid>http://engblog.yext.com/edward/quickstart/</guid>
      <description>

&lt;h2 id=&#34;setup&#34;&gt;Setup&lt;/h2&gt;

&lt;p&gt;Before starting with these instructions, make sure you&amp;rsquo;ve &lt;a href=&#34;http://engblog.yext.com/edward/installation/&#34;&gt;installed Edward&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To get you started with Edward, we&amp;rsquo;re going to create a few simple services
and groups. Our example services will all be written in Go.&lt;/p&gt;

&lt;p&gt;These instructions assume a bash terminal.&lt;/p&gt;

&lt;p&gt;First off, let&amp;rsquo;s create a parent folder for our services. This is where the Edward
config file will live. In your &lt;em&gt;GOPATH&lt;/em&gt;, create a folder called &lt;em&gt;edward_quickstart&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;mkdir $GOPATH/edward_quickstart
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you prefer, you can also create this folder under your GitHub username, to fit
in with your other projects: &lt;em&gt;$GOPATH/github.com/user/edward_quickstart&lt;/em&gt;. The
following instructions will assume &lt;em&gt;$GOPATH/edward_quickstart&lt;/em&gt; for brevity.&lt;/p&gt;

&lt;h2 id=&#34;creating-your-first-service&#34;&gt;Creating Your First Service&lt;/h2&gt;

&lt;p&gt;Your first service will be a classic &amp;ldquo;Hello, world!&amp;rdquo; HTTP server.
This service will sit under &lt;em&gt;edward_quickstart&lt;/em&gt; and will consist of a single file,
&lt;em&gt;main.go&lt;/em&gt;. Let&amp;rsquo;s create that directory and file now:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;mkdir $GOPATH/edward_quickstart/hello
touch $GOPATH/edward_quickstart/hello/main.go
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Open the main.go file you just created and add this code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;flag&amp;quot;
	&amp;quot;fmt&amp;quot;
	&amp;quot;net/http&amp;quot;
)

var port = flag.Int(&amp;quot;port&amp;quot;, 8080, &amp;quot;Port number for service&amp;quot;)

func main() {
	flag.Parse()
	http.HandleFunc(&amp;quot;/&amp;quot;, func(w http.ResponseWriter, r *http.Request) {
		fmt.Fprintf(w, &amp;quot;Hello, world!&amp;quot;)
	})
	http.ListenAndServe(fmt.Sprintf(&amp;quot;:%v&amp;quot;, *port), nil)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This service will listen on port 8080 by default, and return &amp;ldquo;Hello, world!&amp;rdquo; in
the body of every response. But we&amp;rsquo;re not going to run it quite yet, first we&amp;rsquo;re
going to generate a config so we can launch this service with Edward.&lt;/p&gt;

&lt;h2 id=&#34;generating-an-edward-config&#34;&gt;Generating an Edward Config&lt;/h2&gt;

&lt;p&gt;Edward includes a generator for go services which will automatically create config
for any go services found under the current working directory. If we run &lt;code&gt;edward generate&lt;/code&gt;
it will create a config for our new service:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd $GOPATH/edward_quickstart/hello
edward generate
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You will see a message letting you know that config for the service &lt;em&gt;hello&lt;/em&gt; will
be generated and you will be asked to confirm. Type &lt;code&gt;y&lt;/code&gt; to confirm.&lt;/p&gt;

&lt;p&gt;A file called &lt;em&gt;edward.json&lt;/em&gt; will be created in the &lt;em&gt;hello&lt;/em&gt; directory. You can check
that &lt;em&gt;hello&lt;/em&gt; is available as a service by listing all available services.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;edward list
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You should see a list that only includes the &lt;em&gt;hello&lt;/em&gt; service.&lt;/p&gt;

&lt;h2 id=&#34;starting-your-service&#34;&gt;Starting your Service&lt;/h2&gt;

&lt;p&gt;Now we have our configuration set up, we can run the hello service with this command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;edward start hello
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will build and launch the hello service. Once the command completes, open
a browser and go to &lt;em&gt;&lt;a href=&#34;http://localhost:8080/&#34;&gt;http://localhost:8080/&lt;/a&gt;&lt;/em&gt;, you should see the message
&lt;strong&gt;Hello, world!&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&#34;stopping-your-service&#34;&gt;Stopping your Service&lt;/h2&gt;

&lt;p&gt;Your service is now running in the background, you can stop it with the &lt;code&gt;stop&lt;/code&gt; command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;edward stop hello
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you now try to browse to &lt;em&gt;&lt;a href=&#34;http://localhost:8080/&#34;&gt;http://localhost:8080/&lt;/a&gt;&lt;/em&gt;, you will see an error message,
as the server is no longer running.&lt;/p&gt;

&lt;p&gt;When running more than one service, you can stop all services at once with &lt;code&gt;edward stop&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;restarting-your-service&#34;&gt;Restarting your Service&lt;/h2&gt;

&lt;p&gt;If you&amp;rsquo;ve made changes to a service, you can restart it to trigger a rebuild.
To try this out, first start the service again.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;edward start hello
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, while the service is running, open the &lt;em&gt;main.go&lt;/em&gt; file you created earlier, and change:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;fmt.Fprintf(w, &amp;quot;Hello, world!&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;to:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;fmt.Fprintf(w, &amp;quot;Greetings, world!&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To apply this change to your service, run the command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;edward restart hello
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will stop the service, then build and launch it again. If you browse to
&lt;em&gt;&lt;a href=&#34;http://localhost:8080/&#34;&gt;http://localhost:8080/&lt;/a&gt;&lt;/em&gt; again, you will see that the message has changed to &lt;em&gt;Greetings, world!&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&#34;modifying-the-edward-config&#34;&gt;Modifying the Edward Config&lt;/h2&gt;

&lt;p&gt;The Edward config you generated can be found at &lt;em&gt;$GOPATH/edward_quickstart/edward.json&lt;/em&gt;.
We&amp;rsquo;re going to edit this file to have the hello service listen on a different port.&lt;/p&gt;

&lt;p&gt;Open &lt;em&gt;edward.json&lt;/em&gt;, you will see the hello service defined as the only entry in the &lt;em&gt;services&lt;/em&gt; array.
Under &lt;em&gt;commands&lt;/em&gt;, you will see two string values, &lt;em&gt;build&lt;/em&gt; and &lt;em&gt;launch&lt;/em&gt;.
These define the commands used to build and launch your service, respectively.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;re going to change the launch command to use a different port. Change:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&amp;quot;launch&amp;quot;: &amp;quot;hello&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&amp;quot;launch&amp;quot;: &amp;quot;hello -port=8081&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Save the config file, and restart the hello service as you did earlier.&lt;/p&gt;

&lt;p&gt;The URL &lt;em&gt;&lt;a href=&#34;http://localhost:8080/&#34;&gt;http://localhost:8080/&lt;/a&gt;&lt;/em&gt; will now no longer work, but &lt;em&gt;&lt;a href=&#34;http://localhost:8081/&#34;&gt;http://localhost:8081/&lt;/a&gt;&lt;/em&gt;
will show the message as expected.&lt;/p&gt;

&lt;h2 id=&#34;adding-a-second-service&#34;&gt;Adding a Second Service&lt;/h2&gt;

&lt;p&gt;To complement the hello service, let&amp;rsquo;s add a goodbye service. First, create a directory
and source file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;mkdir $GOPATH/edward_quickstart/goodbye
touch $GOPATH/edward_quickstart/goodbye/main.go
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Edit &lt;em&gt;$GOPATH/edward_quickstart/goodbye/main.go&lt;/em&gt; and add the following code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;flag&amp;quot;
	&amp;quot;fmt&amp;quot;
	&amp;quot;net/http&amp;quot;
)

var port = flag.Int(&amp;quot;port&amp;quot;, 8082, &amp;quot;Port number for service&amp;quot;)

func main() {
	flag.Parse()
	http.HandleFunc(&amp;quot;/&amp;quot;, func(w http.ResponseWriter, r *http.Request) {
		fmt.Fprintf(w, &amp;quot;Goodbye, world!&amp;quot;)
    fmt.Println(&amp;quot;Received request&amp;quot;)
	})
	http.ListenAndServe(fmt.Sprintf(&amp;quot;:%v&amp;quot;, *port), nil)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you run &lt;code&gt;edward generate&lt;/code&gt; now, it will create the goodbye service (you may be
prompted for both services, don&amp;rsquo;t worry, just confirm), but the hello service&amp;rsquo;s
config will not be changed.&lt;/p&gt;

&lt;p&gt;Run &lt;code&gt;edward list&lt;/code&gt; to confirm that both services are available.&lt;/p&gt;

&lt;p&gt;We can start our new service in the same way we started hello:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;edward start goodbye
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And can view the goodbye message at &lt;em&gt;&lt;a href=&#34;http://localhost:8082/&#34;&gt;http://localhost:8082/&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;We can also start both services at once. First, stop everything by running &lt;code&gt;edward stop&lt;/code&gt;.
Then run a start command specifying both services.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;edward start hello goodbye
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Both services will now be running. You can test at their URLs, but you can also
see a summary of all your running services with:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;edward status
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will show that both services are running, along with the port on which they are running, which
should be 8081 for hello and 8082 for goodbye.&lt;/p&gt;

&lt;h2 id=&#34;creating-a-group&#34;&gt;Creating a Group&lt;/h2&gt;

&lt;p&gt;Specifying every service you want to start can be useful for one or two services,
but can get tedious for more complicated setups.&lt;/p&gt;

&lt;p&gt;To simplify the workflow, you can create groups of services which can be started
all at once from a single name.&lt;/p&gt;

&lt;p&gt;Open your &lt;em&gt;edward.json&lt;/em&gt; file and add a &lt;em&gt;groups&lt;/em&gt; array as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
    &amp;quot;groups&amp;quot;: [
      {
        &amp;quot;name&amp;quot;: &amp;quot;salutations&amp;quot;,
        &amp;quot;children&amp;quot;: [&amp;quot;hello&amp;quot;, &amp;quot;goodbye&amp;quot;]
      }
    ],
    &amp;quot;services&amp;quot;: [
      ...
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Save the file and you will now see &lt;em&gt;salutations&lt;/em&gt; under the groups list when
you run &lt;code&gt;edward list&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Stop any running services, then start the group:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;edward start salutations
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will build and launch both services, which you can confirm with &lt;code&gt;edward status&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;viewing-logs&#34;&gt;Viewing Logs&lt;/h2&gt;

&lt;p&gt;For debugging, you&amp;rsquo;ll need to be able to view the output from your services. You can
follow the output from one service using the &lt;code&gt;log&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;Make sure your services are still running, and run the log command to see the output for
the goodbye service:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;edward log goodbye
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will begin following the output from goodbye. If you visit &lt;em&gt;&lt;a href=&#34;http://localhost:8082/&#34;&gt;http://localhost:8082/&lt;/a&gt;&lt;/em&gt;,
you will see the message &amp;ldquo;Received request&amp;rdquo; in the output. You can stop following
the log by pressing &lt;code&gt;Ctrl+c&lt;/code&gt; to interrupt the command.&lt;/p&gt;

&lt;p&gt;Running &lt;code&gt;edward log&lt;/code&gt; will show both standard and error output. You can also use
the alias &lt;code&gt;edward tail&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;

&lt;p&gt;After this guide, you should now be able to use Edward to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Start, stop and restart services and groups&lt;/li&gt;
&lt;li&gt;Generate config for go services&lt;/li&gt;
&lt;li&gt;Set up groups&lt;/li&gt;
&lt;li&gt;View service status&lt;/li&gt;
&lt;li&gt;Follow service output&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Roadmap</title>
      <link>http://engblog.yext.com/edward/roadmap/</link>
      <pubDate>Wed, 09 Mar 2016 20:08:11 +0100</pubDate>
      
      <guid>http://engblog.yext.com/edward/roadmap/</guid>
      <description>

&lt;h2 id=&#34;planned-features&#34;&gt;Planned Features&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Plugins for generators&lt;/li&gt;
&lt;li&gt;Error counts in status&lt;/li&gt;
&lt;li&gt;System tray/menu interface&lt;/li&gt;
&lt;li&gt;Toast notifications&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;issues&#34;&gt;Issues&lt;/h2&gt;

&lt;p&gt;Bugs and planned work are tracked in the Edward GitHub repo under &lt;a href=&#34;https://github.com/yext/edward/issues&#34;&gt;issues&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;contributing&#34;&gt;Contributing&lt;/h2&gt;

&lt;p&gt;Contributions to Edward are always welcome. Please feel free to raise new &lt;a href=&#34;https://github.com/yext/edward/issues&#34;&gt;issues&lt;/a&gt; or submit a &lt;a href=&#34;https://github.com/yext/edward/pulls&#34;&gt;pull request&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>License</title>
      <link>http://engblog.yext.com/edward/license/</link>
      <pubDate>Wed, 09 Mar 2016 20:10:46 +0100</pubDate>
      
      <guid>http://engblog.yext.com/edward/license/</guid>
      <description>&lt;p&gt;The MIT License (MIT)&lt;/p&gt;

&lt;p&gt;Copyright &amp;copy; 2016 Yext&lt;/p&gt;

&lt;p&gt;Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the &amp;ldquo;Software&amp;rdquo;), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:&lt;/p&gt;

&lt;p&gt;The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.&lt;/p&gt;

&lt;p&gt;THE SOFTWARE IS PROVIDED &amp;ldquo;AS IS&amp;rdquo;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Commands</title>
      <link>http://engblog.yext.com/edward/commands/</link>
      <pubDate>Wed, 01 Feb 2017 17:24:55 -0500</pubDate>
      
      <guid>http://engblog.yext.com/edward/commands/</guid>
      <description>

&lt;p&gt;Edward provides a series of commands to manage your local services, which are called
using the form:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ edward [command]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You may have discovered some of these already in the &lt;a href=&#34;../quickstart/&#34;&gt;Quickstart&lt;/a&gt;,
but they are outlined in more detail here.&lt;/p&gt;

&lt;h2 id=&#34;list&#34;&gt;List&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;list&lt;/code&gt; command outputs a list of all the services and groups that are defined
in the current &lt;a href=&#34;../projectconfig&#34;&gt;&lt;code&gt;edward.json&lt;/code&gt;&lt;/a&gt;. It takes no arguments.&lt;/p&gt;

&lt;p&gt;Groups are listed first, followed by services. The list will include all services
that are defined by your &lt;code&gt;edward.json&lt;/code&gt; or any of the files it imports.&lt;/p&gt;

&lt;h2 id=&#34;start&#34;&gt;Start&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;start&lt;/code&gt; command will build and launch a service or group locally. It takes
the name of one or more services as arguments.&lt;/p&gt;

&lt;p&gt;For example, to start the service named &lt;em&gt;myservice&lt;/em&gt;, you would run:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ edward start myservice
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To start the group &lt;em&gt;mygroup&lt;/em&gt; along with &lt;em&gt;myservice&lt;/em&gt;, you would run:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ edward start mygroup myservice
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When starting multiple services, it will build and launch them sequentially.&lt;/p&gt;

&lt;p&gt;If any of the specified services are already running, Edward will ignore them and move on to the next
service.&lt;/p&gt;

&lt;p&gt;If Edward fails to build or launch any services, it will stop the operation and any subsequent specified
services will not start.&lt;/p&gt;

&lt;p&gt;Once all services have been started, the Edward command will exit, and these services will continue to run in the background.&lt;/p&gt;

&lt;h2 id=&#34;stop&#34;&gt;Stop&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;stop&lt;/code&gt; command will stop one or more groups and/or services. It takes service
and group names are arguments in the same manner as &lt;code&gt;start&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For example, to stop &lt;em&gt;mygroup&lt;/em&gt; and &lt;em&gt;myservice&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ edward stop mygroup myservice
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If any of the specified services are not running, Edward will ignore them and move on to the next
service. If Edward fails to stop a service, it will continue to stop the rest of the services specified.&lt;/p&gt;

&lt;h2 id=&#34;restart&#34;&gt;Restart&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;restart&lt;/code&gt; command will rebuild and relaunch the specified groups/services.  It takes service
and group names are arguments in the same manner as &lt;code&gt;start&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To restart &lt;em&gt;mygroup&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ edward restart mygroup
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Each service will be stopped, rebuilt and relaunched sequentially. If Edward fails to start, build or launch any
service, the operation will end, as with &lt;code&gt;start&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;log-tail&#34;&gt;Log/Tail&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;log&lt;/code&gt; or &lt;code&gt;tail&lt;/code&gt; command will output and then follow the console logs for the specified groups/services.&lt;/p&gt;

&lt;p&gt;For example, to output and follow the logs for &lt;em&gt;myservice&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ edward log myservice
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ edward tail myservice
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If more than one service is being output, the name of the service will be added to the start
of each line in the log to distinguish them.&lt;/p&gt;

&lt;h2 id=&#34;generate&#34;&gt;Generate&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;generate&lt;/code&gt; command will search in the current working directory for projects for which Edward
can automatically generate a config file. It will then either create a new &lt;code&gt;edward.json&lt;/code&gt; file in the
working directory, or add to the existing file.&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ edward generate
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Will search in all directories below the working directory and automatically generate config for any
supported projects that are found.&lt;/p&gt;

&lt;p&gt;If you want to only generate config for a specific project, you can specify it as an argument:&lt;/p&gt;

&lt;p&gt;$ edward generate myservice&lt;/p&gt;

&lt;p&gt;Edward supports autogeneration for three types of project:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;go&lt;/li&gt;
&lt;li&gt;Docker&lt;/li&gt;
&lt;li&gt;icbm&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;go&#34;&gt;Go&lt;/h3&gt;

&lt;p&gt;The &lt;em&gt;Go&lt;/em&gt; generator will create service configuration for services written in the &lt;a href=&#34;https://golang.org/&#34;&gt;Go programming language&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This generator will match any folder containing a &lt;code&gt;main&lt;/code&gt; package. The name of this
folder will be used as the name of the service.&lt;/p&gt;

&lt;p&gt;The generated config will build the project by changing into the package directory and running &lt;code&gt;go install&lt;/code&gt;
with no additional arguments. The name of the project will be used to launch the resulting binary.&lt;/p&gt;

&lt;p&gt;The generated config will assume that a service has started successfully by detecting that it is listening on
at least one port. If a service does not listen on any ports, it will time out when starting.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;Go&lt;/em&gt; generator will attempt to configure the watch paths for Go services, based on the imports of the project&amp;rsquo;s source.&lt;/p&gt;

&lt;p&gt;Note that this generator assumes that your &lt;em&gt;GOPATH&lt;/em&gt; is configured correctly to build discovered projects.&lt;/p&gt;

&lt;p&gt;Once a Go service has been found, any folders inside the package directory will not be searched.&lt;/p&gt;

&lt;h3 id=&#34;docker&#34;&gt;Docker&lt;/h3&gt;

&lt;p&gt;The &lt;em&gt;Docker&lt;/em&gt; generator will create service configuration for &lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker containers&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This generator will match any folder containing a &lt;em&gt;Dockerfile&lt;/em&gt;. The name of this folder
will be used as the name of the service.&lt;/p&gt;

&lt;p&gt;The generated config will build the container using &lt;code&gt;docker build&lt;/code&gt; and start it using &lt;code&gt;docker run&lt;/code&gt;. An
Edward specific tag will be used to identify these container instances.&lt;/p&gt;

&lt;p&gt;The port to be used for this service will be identified by the &lt;code&gt;EXPOSE&lt;/code&gt; command in the Dockerfile. This same port will be opened locally for this service. Edward will identify that this container has started successfully when the
exposed port is open. If &lt;code&gt;EXPOSE&lt;/code&gt; is not used, starting the container will time out.&lt;/p&gt;

&lt;p&gt;Note that this generator will assume that you can execute the &lt;code&gt;docker&lt;/code&gt; command without additional configuration, so older Docker Toolkit distributions may not work.&lt;/p&gt;

&lt;h3 id=&#34;icbm&#34;&gt;icbm&lt;/h3&gt;

&lt;p&gt;The &lt;em&gt;icbm&lt;/em&gt; generator will generate service configuration for services that use the &lt;a href=&#34;https://github.com/yext/icbm&#34;&gt;icbm&lt;/a&gt; build tool.&lt;/p&gt;

&lt;p&gt;This generator will look for a &lt;em&gt;build.spec&lt;/em&gt; file and generate a service for each of the named aliases.&lt;/p&gt;

&lt;p&gt;The generated config will assume that a service has started successfully by detecting that it is listening on
at least one port. If a service does not listen on any ports, it will time out when starting.&lt;/p&gt;

&lt;h3 id=&#34;ignoring-directories&#34;&gt;Ignoring directories&lt;/h3&gt;

&lt;p&gt;To protect against false positives, you can instruct Edward to ignore specific patterns when running &lt;code&gt;generate&lt;/code&gt; by creating an &lt;em&gt;.edwardignore&lt;/em&gt; file.&lt;/p&gt;

&lt;p&gt;This file uses the same format as &lt;a href=&#34;https://git-scm.com/docs/gitignore&#34;&gt;gitignore&lt;/a&gt;. You can place an &lt;em&gt;.edwardignore&lt;/em&gt; file in any directory and it will take effect for paths below that directory, replacing ignores specified by ignore files higher up.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Project Configuration</title>
      <link>http://engblog.yext.com/edward/projectconfig/</link>
      <pubDate>Wed, 01 Feb 2017 17:24:55 -0500</pubDate>
      
      <guid>http://engblog.yext.com/edward/projectconfig/</guid>
      <description>

&lt;h2 id=&#34;edward-json&#34;&gt;edward.json&lt;/h2&gt;

&lt;p&gt;The &lt;em&gt;edward.json&lt;/em&gt; file defines the services and groups that can be managed by Edward.&lt;/p&gt;

&lt;p&gt;Edward will look for an &lt;em&gt;edward.json&lt;/em&gt; file in the current working directory, and if not found there,
it will look for &lt;em&gt;edward.json&lt;/em&gt; in every parent directory to the root.&lt;/p&gt;

&lt;p&gt;If no config file can be found, Edward will exit with an error and print usage information.&lt;/p&gt;

&lt;p&gt;You can override this behavior with the &lt;code&gt;--config&lt;/code&gt; or &lt;code&gt;-c&lt;/code&gt; flag:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ edward -c path/to/alternative.json list
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;structure&#34;&gt;Structure&lt;/h2&gt;

&lt;p&gt;An &lt;em&gt;edward.json&lt;/em&gt; file at its core is a JSON document, containing an object with three array attributes:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;imports&amp;quot;: [],
  &amp;quot;groups&amp;quot;: [],
  &amp;quot;services&amp;quot;: []
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;These attributes are all optional.&lt;/p&gt;

&lt;h2 id=&#34;services&#34;&gt;Services&lt;/h2&gt;

&lt;p&gt;A basic service consists of a &lt;em&gt;name&lt;/em&gt;, a &lt;em&gt;path&lt;/em&gt; in which to run the build and launch commands, and &lt;em&gt;commands&lt;/em&gt;
to perform the build and launch steps:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
    &amp;quot;name&amp;quot;: &amp;quot;myservice&amp;quot;,
    &amp;quot;path&amp;quot;: &amp;quot;path/to/myservice&amp;quot;,
    &amp;quot;commands&amp;quot;: {
        &amp;quot;build&amp;quot;: &amp;quot;make install&amp;quot;,
        &amp;quot;launch&amp;quot;: &amp;quot;myservice&amp;quot;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The service &lt;em&gt;name&lt;/em&gt; is the name you will use to identify this service when calling Edward commands.&lt;/p&gt;

&lt;div class=&#34;admonition warning&#34;&gt;
&lt;p class=&#34;admonition-title&#34;&gt;Names must be unique&lt;/p&gt;
&lt;p&gt;Service and group names must be unique within your Edward config. If duplicates are found, Edward will
exit with an error.&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;The &lt;em&gt;path&lt;/em&gt; and each of the &lt;em&gt;commands&lt;/em&gt; are optional. If no path is specified, Edward will run the commands in the current working directory. If a build command is omitted, only the launch script will be executed, and vice versa. This allows you to run pre-flight build steps common to many services, or start third-party applications you don&amp;rsquo;t need to build.&lt;/p&gt;

&lt;p&gt;You can use environment variables in the path and commands:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
    &amp;quot;name&amp;quot;: &amp;quot;myservice&amp;quot;,
    &amp;quot;path&amp;quot;: &amp;quot;$HOME/src/myservice&amp;quot;,
    &amp;quot;commands&amp;quot;: {
        &amp;quot;launch&amp;quot;: &amp;quot;myservice -key $MY_KEY&amp;quot;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However, you cannot use shell-specific constructs like piping (&lt;code&gt;|&lt;/code&gt;) or redirection (&lt;code&gt;&amp;gt;&lt;/code&gt;). For complex
build and launch operations, we recommend consolidating multiple commands into a separate script file.&lt;/p&gt;

&lt;h3 id=&#34;custom-stop-scripts&#34;&gt;Custom Stop Scripts&lt;/h3&gt;

&lt;p&gt;If you need to run a specific command to stop a service, you can add a &lt;em&gt;stop&lt;/em&gt; command to the service definition:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
    &amp;quot;name&amp;quot;: &amp;quot;myservice&amp;quot;,
    &amp;quot;commands&amp;quot;: {
        &amp;quot;launch&amp;quot;: &amp;quot;myservice up&amp;quot;,
        &amp;quot;stop&amp;quot;: &amp;quot;myservice down&amp;quot;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If this command fails, Edward will attempt to send a kill signal to the running service.&lt;/p&gt;

&lt;h3 id=&#34;detecting-successful-launch&#34;&gt;Detecting Successful Launch&lt;/h3&gt;

&lt;p&gt;When Edward starts a service, it will confirm that the service has started successfully before proceeding. By default, Edward will consider a service to have started if it is listening on one or more ports.&lt;/p&gt;

&lt;p&gt;You can override this behavior by setting the &lt;em&gt;launch_checks&lt;/em&gt; attribute for the service.&lt;/p&gt;

&lt;p&gt;If your service will output a known piece of text to the console when it has finished startup, you can specify a &lt;em&gt;log_text&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
    &amp;quot;name&amp;quot;: &amp;quot;myservice&amp;quot;,
    ...
    &amp;quot;launch_checks&amp;quot;: {
      &amp;quot;log_text&amp;quot;: &amp;quot;Finished startup&amp;quot;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this case, once the text &amp;ldquo;Finished startup&amp;rdquo; appears in the console lot, Edward will deem the service to have started successfully.&lt;/p&gt;

&lt;p&gt;Alternatively, you can specify a set of ports:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
    &amp;quot;name&amp;quot;: &amp;quot;myservice&amp;quot;,
    ...
    &amp;quot;launch_checks&amp;quot;: {
      &amp;quot;ports&amp;quot;: [8080, 8081]
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And Edward will wait for all the listed ports to be open before considering the service started. When ports are specified, the process that opens them will not be taken into account.&lt;/p&gt;

&lt;h3 id=&#34;environment-variables&#34;&gt;Environment Variables&lt;/h3&gt;

&lt;p&gt;To specify environment variables to be passed to a service, you can add the &lt;em&gt;env&lt;/em&gt; attribute, which is an array of environment variables in the form &lt;code&gt;KEY=VALUE&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
    &amp;quot;name&amp;quot;: &amp;quot;myservice&amp;quot;,
    ...
    &amp;quot;env&amp;quot;: [
      &amp;quot;ENV_VAR=value&amp;quot;
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;platform-specific-services&#34;&gt;Platform-Specific Services&lt;/h3&gt;

&lt;p&gt;Some services need different configuration for different platforms. To make a service platform-specific, set the &lt;em&gt;platform&lt;/em&gt; attribute.&lt;/p&gt;

&lt;p&gt;It is permitted to have multiple services with the same name, provided they have different platforms.&lt;/p&gt;

&lt;p&gt;The below example will create two instances of &lt;em&gt;myservice&lt;/em&gt;: one for Mac OS (darwin) and one for Linux:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
    &amp;quot;name&amp;quot;: &amp;quot;myservice&amp;quot;,
    ...
    &amp;quot;platform&amp;quot;: &amp;quot;darwin&amp;quot;
},
{
    &amp;quot;name&amp;quot;: &amp;quot;myservice&amp;quot;,
    ...
    &amp;quot;platform&amp;quot;: &amp;quot;linux&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;warming-up-services&#34;&gt;&amp;ldquo;Warming Up&amp;rdquo; Services&lt;/h3&gt;

&lt;p&gt;Some services may do a portion of their setup on the first request they receive. To cut down on waiting
time when working with such services, you can configure Edward to make a request to a URL after starting a service.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
    &amp;quot;name&amp;quot;: &amp;quot;myservice&amp;quot;,
    ...
    &amp;quot;warmup&amp;quot;: {
      &amp;quot;url&amp;quot;: &amp;quot;http://localhost:8080&amp;quot;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Requests to these URLs will happen in the background, and will not delay the starting of other services.&lt;/p&gt;

&lt;h3 id=&#34;autorestart-watch&#34;&gt;Autorestart (watch)&lt;/h3&gt;

&lt;p&gt;To save you running &lt;code&gt;edward restart&lt;/code&gt; every time you make a change to a service, you can configure a set of
directories to be monitored for changes. If a file in the specified directories changes, your service will
automatically be restarted.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
    &amp;quot;name&amp;quot;: &amp;quot;myservice&amp;quot;,
    ...
    &amp;quot;watch&amp;quot;: {
      &amp;quot;include&amp;quot;: [&amp;quot;dir1&amp;quot;, &amp;quot;dir2&amp;quot;]
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the above example, changes in &lt;em&gt;dir1&lt;/em&gt; or &lt;em&gt;dir2&lt;/em&gt; will result in &lt;em&gt;myservice&lt;/em&gt; being restarted.&lt;/p&gt;

&lt;p&gt;You can also specify directories to be explicitly excluded:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
    &amp;quot;name&amp;quot;: &amp;quot;myservice&amp;quot;,
    ...
    &amp;quot;watch&amp;quot;: {
      &amp;quot;include&amp;quot;: [&amp;quot;dir1&amp;quot;, &amp;quot;dir2&amp;quot;],
      &amp;quot;exclude&amp;quot;: [&amp;quot;dir1/exclude&amp;quot;]
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If rebuilding the service fails, the existing running instance will not be stopped. Details of attempts to
restart services can be found in the service logs.&lt;/p&gt;

&lt;h3 id=&#34;requiring-sudo&#34;&gt;Requiring Sudo&lt;/h3&gt;

&lt;p&gt;If a service needs sudo to run, it will need to be marked appropriately:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;name&amp;quot;: &amp;quot;myservice&amp;quot;,
  &amp;quot;requiresSudo&amp;quot;: true
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If any service to be started/stopped/restarted requires sudo, Edward will trigger a prompt for the user&amp;rsquo;s password.
This prompt is triggered through scripting, Edward itself will not have access to your password.&lt;/p&gt;

&lt;h2 id=&#34;groups&#34;&gt;Groups&lt;/h2&gt;

&lt;p&gt;The &lt;em&gt;groups&lt;/em&gt; array contains a list of group objects, each of which have a name and a list of children.
A group&amp;rsquo;s children can be either services, or other groups.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;name&amp;quot;: &amp;quot;mygroup&amp;quot;,
  &amp;quot;children&amp;quot;: [&amp;quot;childgroup&amp;quot;, &amp;quot;childservice&amp;quot;]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above example specifies a group called &lt;em&gt;mygroup&lt;/em&gt; with two children, &lt;em&gt;childgroup&lt;/em&gt; and &lt;em&gt;childservice&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&#34;imports&#34;&gt;Imports&lt;/h2&gt;

&lt;p&gt;The &lt;em&gt;imports&lt;/em&gt; array is a list of other config files to be imported into this one:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&amp;quot;imports&amp;quot;: [&amp;quot;import1.json&amp;quot;, &amp;quot;path/to/import2.json&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The paths to imports are relative to the parent &lt;code&gt;edward.json&lt;/code&gt; file. Imported config files may also import other
config files.&lt;/p&gt;

&lt;p&gt;The combined configuration is validated after all imports have been loaded, so a group in one file may have as a child a service from another file, provided they are connected by an import in some way.&lt;/p&gt;

&lt;h2 id=&#34;versioning&#34;&gt;Versioning&lt;/h2&gt;

&lt;p&gt;If you are using features from a new version of Edward, and want to make sure that your config file can only be used by that version or higher, you can specify the &lt;em&gt;edwardVersion&lt;/em&gt; setting in your config file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;edwardVersion&amp;quot;: &amp;quot;1.6.0&amp;quot;,
  &amp;quot;imports&amp;quot;: [],
  &amp;quot;groups&amp;quot;: [],
  &amp;quot;services&amp;quot;: []
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will require that Edward version 1.6.0 or higher is installed in order to use your config file.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Autocompletion</title>
      <link>http://engblog.yext.com/edward/autocompletion/</link>
      <pubDate>Sun, 15 Jan 2017 22:29:28 -0500</pubDate>
      
      <guid>http://engblog.yext.com/edward/autocompletion/</guid>
      <description>&lt;p&gt;To enable bash autocompletion, create a file with the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#! /bin/bash

: ${PROG:=$(basename ${BASH_SOURCE})}

_cli_bash_autocomplete() {
     local cur opts base
     COMPREPLY=()
     cur=&amp;quot;${COMP_WORDS[COMP_CWORD]}&amp;quot;
     opts=$( ${COMP_WORDS[@]:0:$COMP_CWORD} --generate-bash-completion )
     COMPREPLY=( $(compgen -W &amp;quot;${opts}&amp;quot; -- ${cur}) )
     return 0
 }

 complete -F _cli_bash_autocomplete $PROG
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then source it from your bash profile&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;PROG=edward source FILE
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Alternatively, name the file edward and place it in your system appropriate &lt;code&gt;bash_completion.d/&lt;/code&gt; directory.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Sudo</title>
      <link>http://engblog.yext.com/edward/sudo/</link>
      <pubDate>Sun, 15 Jan 2017 22:16:39 -0500</pubDate>
      
      <guid>http://engblog.yext.com/edward/sudo/</guid>
      <description>&lt;p&gt;Edward will not run if you try to launch it with sudo, but it may ask you to provide your password so that certain services can be run with elevated priviledges. The password request is triggered through a bash script that calls a command with sudo, to ensure that your bash session can make further sudo calls without prompting.&lt;/p&gt;

&lt;p&gt;This has only been tested in one bash environment, so your mileage may vary. If services hang when starting (waiting for their log), this may be an indicator that they are waiting for a password prompt that isn&amp;rsquo;t redirected anywhere.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>